= minitest-rails

MiniTest integration for Rails 3.x

{<img src="https://secure.travis-ci.org/blowmage/minitest-rails.png" alt="Build Status" />}[http://travis-ci.org/blowmage/minitest-rails]

== Install

    gem install minitest-rails

This installs the following gems:

    minitest

== Configure

Create a new rails app without Test::Unit:

    rails new MyApp --skip-test-unit

Add <tt>minitest-rails</tt> to the <tt>:test</tt> and <tt>:development</tt> groups in Gemfile:

    group :test, :development do
      gem 'minitest-rails'
    end

Next run the installation generator with the following:

    rails generate mini_test:install

This will add the <tt>minitest_helper.rb</tt> file to the <tt>test</tt> directory.

== Usage

We aim to expose MiniTest with minimal changes for testing within Rails.
Because of this, we allow <tt>Test::Unit</tt> and <tt>MiniTest</tt> tests to live side by side.
Your test classes will inherit from <tt>MiniTest::Rails::ActiveSupport::TestCase</tt> as opposed to <tt>ActiveSupport::TestCase</tt>.
You can use the <tt>MiniTest::Spec</tt> DSL.
You can generate test files with the standard model, controller, resource, and other generators:

    rails generate model User

And you can specify generating the tests using the <tt>MiniTest::Spec</tt> DSL on any of the generators by providing the <tt>--spec</tt> option:

    rails generate model User --spec

And you can specify not generating the fixture for a model by providing the <tt>--skip-fixture</tt> option:

    rails generate model User --skip-fixture

You can also set these as defaults by adding the following to the <tt>config/application.rb</tt> file:

    config.generators do |g|
      g.test_framework :mini_test, :spec => true, :fixture => false
    end

== Overriding <tt>Test::Unit</tt>

Of course, you may not want to maintain separate <tt>Test::Unit</tt> and <tt>MiniTest</tt> tests.
If this is the behavior you are wanting, simply add the following to your <tt>test_helper.rb</tt> file:

    require "minitest/rails"
    MiniTest::Rails.override_testunit!

== Capybara

You can use Capybara in your acceptance/integration tests by adding <tt>minitest-rails-capybara</tt> as a dependency.

    group :test, :development do
      gem 'minitest-rails'
      gem 'minitest-rails-capybara'
    end

And add the following to your test helper file:

    require "minitest/rails/capybara"

See the <tt>minitest-rails-capybara</tt> project for more information.

== Incompatibilities

Existing tests that call <tt>describe</tt> will not work, since <tt>describe</tt> is used by <tt>MiniTest::Spec</tt> blocks.

== Get Involved

Join the mailing list to get help or offer suggestions.

https://groups.google.com/group/minitest-rails

== License

Copyright (c) 2012 Mike Moore

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
