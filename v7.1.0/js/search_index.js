var search_data = {"index":{"searchIndex":["actioncable","channel","testcase","connection","testcase","testcase","actiondispatch","integrationtest","systemtestcase","actionmailer","testcase","actionview","testcase","activejob","testcase","activesupport","testcase","minitest","generators","installgenerator","rails","expectations","actioncable","channel","connection","testhelper","actiondispatch","actionmailer","activejob","activesupport","railtie","rails","generators","testcase","assert_broadcast_on()","assert_broadcast_on()","assert_broadcasts()","assert_broadcasts()","assert_changes()","assert_difference()","assert_difference()","assert_difference()","assert_dom_equal()","assert_dom_equal()","assert_dom_not_equal()","assert_dom_not_equal()","assert_emails()","assert_enqueued_email_with()","assert_enqueued_emails()","assert_enqueued_jobs()","assert_enqueued_with()","assert_generates()","assert_generates()","assert_has_stream()","assert_has_stream_for()","assert_no_difference()","assert_no_difference()","assert_performed_jobs()","assert_performed_with()","assert_recognizes()","assert_recognizes()","assert_redirected_to()","assert_redirected_to()","assert_reject_connection()","assert_response()","assert_response()","assert_routing()","assert_routing()","assert_select()","assert_select()","assert_select_email()","assert_select_email()","assert_select_encoded()","assert_select_encoded()","copy_minitest_files()","must_broadcast_on()","must_change()","must_differ()","must_dom_equal()","must_enqueue_email_with()","must_enqueue_jobs()","must_enqueue_with()","must_have_broadcasts()","must_have_emails()","must_have_enqueued_emails()","must_have_stream_for()","must_have_streams()","must_perform_jobs()","must_perform_with()","must_reject_connection()","must_route_for()","must_route_from()","must_select()","must_select_email()","must_select_encoded()","refute_difference()","refute_difference()","refute_dom_equal()","refute_dom_equal()","source_root()","wont_change()","wont_differ()","wont_dom_equal()","wont_enqueue_jobs()","wont_have_broadcasts()","wont_have_emails()","wont_have_enqueued_emails()","wont_have_streams()","wont_perform_jobs()","readme"],"longSearchIndex":["actioncable","actioncable::channel","actioncable::channel::testcase","actioncable::connection","actioncable::connection::testcase","actioncable::testcase","actiondispatch","actiondispatch::integrationtest","actiondispatch::systemtestcase","actionmailer","actionmailer::testcase","actionview","actionview::testcase","activejob","activejob::testcase","activesupport","activesupport::testcase","minitest","minitest::generators","minitest::generators::installgenerator","minitest::rails","minitest::rails::expectations","minitest::rails::expectations::actioncable","minitest::rails::expectations::actioncable::channel","minitest::rails::expectations::actioncable::connection","minitest::rails::expectations::actioncable::testhelper","minitest::rails::expectations::actiondispatch","minitest::rails::expectations::actionmailer","minitest::rails::expectations::activejob","minitest::rails::expectations::activesupport","minitest::rails::railtie","rails","rails::generators","rails::generators::testcase","actioncable::channel::testcase#assert_broadcast_on()","actioncable::testcase#assert_broadcast_on()","actioncable::channel::testcase#assert_broadcasts()","actioncable::testcase#assert_broadcasts()","activesupport::testcase#assert_changes()","actiondispatch::integrationtest#assert_difference()","actionview::testcase#assert_difference()","activesupport::testcase#assert_difference()","actiondispatch::integrationtest#assert_dom_equal()","actionview::testcase#assert_dom_equal()","actiondispatch::integrationtest#assert_dom_not_equal()","actionview::testcase#assert_dom_not_equal()","actionmailer::testcase#assert_emails()","actionmailer::testcase#assert_enqueued_email_with()","actionmailer::testcase#assert_enqueued_emails()","activejob::testcase#assert_enqueued_jobs()","activejob::testcase#assert_enqueued_with()","actiondispatch::integrationtest#assert_generates()","actionview::testcase#assert_generates()","actioncable::channel::testcase#assert_has_stream()","actioncable::channel::testcase#assert_has_stream_for()","actiondispatch::integrationtest#assert_no_difference()","actionview::testcase#assert_no_difference()","activejob::testcase#assert_performed_jobs()","activejob::testcase#assert_performed_with()","actiondispatch::integrationtest#assert_recognizes()","actionview::testcase#assert_recognizes()","actiondispatch::integrationtest#assert_redirected_to()","actionview::testcase#assert_redirected_to()","actioncable::connection::testcase#assert_reject_connection()","actiondispatch::integrationtest#assert_response()","actionview::testcase#assert_response()","actiondispatch::integrationtest#assert_routing()","actionview::testcase#assert_routing()","actiondispatch::integrationtest#assert_select()","actionview::testcase#assert_select()","actiondispatch::integrationtest#assert_select_email()","actionview::testcase#assert_select_email()","actiondispatch::integrationtest#assert_select_encoded()","actionview::testcase#assert_select_encoded()","minitest::generators::installgenerator#copy_minitest_files()","minitest::rails::expectations::actioncable::testhelper#must_broadcast_on()","minitest::rails::expectations::activesupport#must_change()","minitest::rails::expectations::activesupport#must_differ()","minitest::rails::expectations::actiondispatch#must_dom_equal()","minitest::rails::expectations::actionmailer#must_enqueue_email_with()","minitest::rails::expectations::activejob#must_enqueue_jobs()","minitest::rails::expectations::activejob#must_enqueue_with()","minitest::rails::expectations::actioncable::testhelper#must_have_broadcasts()","minitest::rails::expectations::actionmailer#must_have_emails()","minitest::rails::expectations::actionmailer#must_have_enqueued_emails()","minitest::rails::expectations::actioncable::channel#must_have_stream_for()","minitest::rails::expectations::actioncable::channel#must_have_streams()","minitest::rails::expectations::activejob#must_perform_jobs()","minitest::rails::expectations::activejob#must_perform_with()","minitest::rails::expectations::actioncable::connection#must_reject_connection()","minitest::rails::expectations::actiondispatch#must_route_for()","minitest::rails::expectations::actiondispatch#must_route_from()","minitest::rails::expectations::actiondispatch#must_select()","minitest::rails::expectations::actiondispatch#must_select_email()","minitest::rails::expectations::actiondispatch#must_select_encoded()","actiondispatch::integrationtest#refute_difference()","actionview::testcase#refute_difference()","actiondispatch::integrationtest#refute_dom_equal()","actionview::testcase#refute_dom_equal()","minitest::generators::installgenerator::source_root()","minitest::rails::expectations::activesupport#wont_change()","minitest::rails::expectations::activesupport#wont_differ()","minitest::rails::expectations::actiondispatch#wont_dom_equal()","minitest::rails::expectations::activejob#wont_enqueue_jobs()","minitest::rails::expectations::actioncable::testhelper#wont_have_broadcasts()","minitest::rails::expectations::actionmailer#wont_have_emails()","minitest::rails::expectations::actionmailer#wont_have_enqueued_emails()","minitest::rails::expectations::actioncable::channel#wont_have_streams()","minitest::rails::expectations::activejob#wont_perform_jobs()",""],"info":[["ActionCable","","ActionCable.html","",""],["ActionCable::Channel","","ActionCable/Channel.html","",""],["ActionCable::Channel::TestCase","","ActionCable/Channel/TestCase.html","","<p>TODO: require?\n"],["ActionCable::Connection","","ActionCable/Connection.html","",""],["ActionCable::Connection::TestCase","","ActionCable/Connection/TestCase.html","",""],["ActionCable::TestCase","","ActionCable/TestCase.html","",""],["ActionDispatch","","ActionDispatch.html","",""],["ActionDispatch::IntegrationTest","","ActionDispatch/IntegrationTest.html","",""],["ActionDispatch::SystemTestCase","","ActionDispatch/SystemTestCase.html","",""],["ActionMailer","","ActionMailer.html","",""],["ActionMailer::TestCase","","ActionMailer/TestCase.html","",""],["ActionView","","ActionView.html","",""],["ActionView::TestCase","","ActionView/TestCase.html","",""],["ActiveJob","","ActiveJob.html","",""],["ActiveJob::TestCase","","ActiveJob/TestCase.html","","<p>TODO: require?\n"],["ActiveSupport","","ActiveSupport.html","",""],["ActiveSupport::TestCase","","ActiveSupport/TestCase.html","",""],["Minitest","","Minitest.html","",""],["Minitest::Generators","","Minitest/Generators.html","",""],["Minitest::Generators::InstallGenerator","","Minitest/Generators/InstallGenerator.html","",""],["Minitest::Rails","","Minitest/Rails.html","",""],["Minitest::Rails::Expectations","","Minitest/Rails/Expectations.html","",""],["Minitest::Rails::Expectations::ActionCable","","Minitest/Rails/Expectations/ActionCable.html","",""],["Minitest::Rails::Expectations::ActionCable::Channel","","Minitest/Rails/Expectations/ActionCable/Channel.html","",""],["Minitest::Rails::Expectations::ActionCable::Connection","","Minitest/Rails/Expectations/ActionCable/Connection.html","",""],["Minitest::Rails::Expectations::ActionCable::TestHelper","","Minitest/Rails/Expectations/ActionCable/TestHelper.html","",""],["Minitest::Rails::Expectations::ActionDispatch","","Minitest/Rails/Expectations/ActionDispatch.html","","<p>This exists as a module to allow easy mixing into classes other than ActionDispatch::IntegrationTest …\n"],["Minitest::Rails::Expectations::ActionMailer","","Minitest/Rails/Expectations/ActionMailer.html","",""],["Minitest::Rails::Expectations::ActiveJob","","Minitest/Rails/Expectations/ActiveJob.html","","<p>This exists as a module to allow easy mixing into classes other than ActiveJob::TestCase where you might …\n"],["Minitest::Rails::Expectations::ActiveSupport","","Minitest/Rails/Expectations/ActiveSupport.html","",""],["Minitest::Rails::Railtie","","Minitest/Rails/Railtie.html","",""],["Rails","","Rails.html","",""],["Rails::Generators","","Rails/Generators.html","",""],["Rails::Generators::TestCase","","Rails/Generators/TestCase.html","",""],["assert_broadcast_on","ActionCable::Channel::TestCase","ActionCable/Channel/TestCase.html#method-i-assert_broadcast_on","","<p>Asserts that the specified message has been sent to the stream.\n\n<pre>def test_assert_transmitted_message\n  ...</pre>\n"],["assert_broadcast_on","ActionCable::TestCase","ActionCable/TestCase.html#method-i-assert_broadcast_on","","<p>Asserts that the specified message has been sent to the stream.\n\n<pre>def test_assert_transmitted_message\n  ...</pre>\n"],["assert_broadcasts","ActionCable::Channel::TestCase","ActionCable/Channel/TestCase.html#method-i-assert_broadcasts","","<p>Asserts that the number of broadcasted messages to the stream matches the given number.\n\n<pre>def test_broadcasts ...</pre>\n"],["assert_broadcasts","ActionCable::TestCase","ActionCable/TestCase.html#method-i-assert_broadcasts","","<p>Asserts that the number of broadcasted messages to the stream matches the given number.\n\n<pre>def test_broadcasts ...</pre>\n"],["assert_changes","ActiveSupport::TestCase","ActiveSupport/TestCase.html#method-i-assert_changes","","<p>Assertion that the result of evaluating an expression is changed before and after invoking the passed …\n"],["assert_difference","ActionDispatch::IntegrationTest","ActionDispatch/IntegrationTest.html#method-i-assert_difference","","<p>Checks the numeric difference between the return value of an expression as a result of what is evaluated. …\n"],["assert_difference","ActionView::TestCase","ActionView/TestCase.html#method-i-assert_difference","","<p>Checks the numeric difference between the return value of an expression as a result of what is evaluated. …\n"],["assert_difference","ActiveSupport::TestCase","ActiveSupport/TestCase.html#method-i-assert_difference","","<p>Test numeric difference between the return value of an expression as a result of what is evaluated in …\n"],["assert_dom_equal","ActionDispatch::IntegrationTest","ActionDispatch/IntegrationTest.html#method-i-assert_dom_equal","","<p>Checks that two HTML strings are equivalent. That they contain the same elements and attributes with …\n"],["assert_dom_equal","ActionView::TestCase","ActionView/TestCase.html#method-i-assert_dom_equal","","<p>Checks that two HTML strings are equivalent. That they contain the same elements and attributes with …\n"],["assert_dom_not_equal","ActionDispatch::IntegrationTest","ActionDispatch/IntegrationTest.html#method-i-assert_dom_not_equal","","<p>Checks that two HTML strings are not equivalent. That they do not contain the same elements and attributes …\n"],["assert_dom_not_equal","ActionView::TestCase","ActionView/TestCase.html#method-i-assert_dom_not_equal","","<p>Checks that two HTML strings are not equivalent. That they do not contain the same elements and attributes …\n"],["assert_emails","ActionMailer::TestCase","ActionMailer/TestCase.html#method-i-assert_emails","","<p>Asserts that the number of emails sent matches the given number.\n\n<pre>def test_emails\n  assert_emails 0\n  ContactMailer.welcome.deliver_now ...</pre>\n"],["assert_enqueued_email_with","ActionMailer::TestCase","ActionMailer/TestCase.html#method-i-assert_enqueued_email_with","{email: 'user@example.com'} do","<p>Asserts that a specific email has been enqueued, optionally matching arguments.\n\n<pre>def test_email\n  ContactMailer.welcome.deliver_later ...</pre>\n"],["assert_enqueued_emails","ActionMailer::TestCase","ActionMailer/TestCase.html#method-i-assert_enqueued_emails","","<p>Asserts that the number of emails enqueued for later delivery matches the given number.\n\n<pre>def test_emails ...</pre>\n"],["assert_enqueued_jobs","ActiveJob::TestCase","ActiveJob/TestCase.html#method-i-assert_enqueued_jobs","","<p>Asserts that the number of enqueued jobs matches the given number.\n\n<pre>def test_jobs\n  assert_enqueued_jobs ...</pre>\n"],["assert_enqueued_with","ActiveJob::TestCase","ActiveJob/TestCase.html#method-i-assert_enqueued_with","","<p>Asserts that the job passed in the block has been enqueued with the given arguments.\n\n<pre>def test_assert_enqueued_with ...</pre>\n"],["assert_generates","ActionDispatch::IntegrationTest","ActionDispatch/IntegrationTest.html#method-i-assert_generates","","<p>Asserts that the provided options can be used to generate the provided path. This is the inverse of  …\n"],["assert_generates","ActionView::TestCase","ActionView/TestCase.html#method-i-assert_generates","","<p>Asserts that the provided options can be used to generate the provided path. This is the inverse of  …\n"],["assert_has_stream","ActionCable::Channel::TestCase","ActionCable/Channel/TestCase.html#method-i-assert_has_stream","","<p>Asserts that the specified stream has been started.\n\n<pre>def test_assert_started_stream\n  subscribe\n  assert_has_stream ...</pre>\n"],["assert_has_stream_for","ActionCable::Channel::TestCase","ActionCable/Channel/TestCase.html#method-i-assert_has_stream_for","","<p>Asserts that the specified stream for a model has started.\n\n<pre>def test_assert_started_stream_for\n  subscribe ...</pre>\n"],["assert_no_difference","ActionDispatch::IntegrationTest","ActionDispatch/IntegrationTest.html#method-i-assert_no_difference","","<p>Checks that the numeric result of evaluating an expression is not changed before and after invoking. …\n"],["assert_no_difference","ActionView::TestCase","ActionView/TestCase.html#method-i-assert_no_difference","","<p>Checks that the numeric result of evaluating an expression is not changed before and after invoking. …\n"],["assert_performed_jobs","ActiveJob::TestCase","ActiveJob/TestCase.html#method-i-assert_performed_jobs","","<p>Asserts that the number of performed jobs matches the given number. If no block is passed, <code>perform_enqueued_jobs</code> …\n"],["assert_performed_with","ActiveJob::TestCase","ActiveJob/TestCase.html#method-i-assert_performed_with","","<p>Asserts that the job passed in the block has been performed with the given arguments.\n\n<pre>def test_assert_performed_with ...</pre>\n"],["assert_recognizes","ActionDispatch::IntegrationTest","ActionDispatch/IntegrationTest.html#method-i-assert_recognizes","","<p>Asserts that the routing of the given <code>path</code> was handled correctly and that the parsed options (given in …\n"],["assert_recognizes","ActionView::TestCase","ActionView/TestCase.html#method-i-assert_recognizes","","<p>Asserts that the routing of the given <code>path</code> was handled correctly and that the parsed options (given in …\n"],["assert_redirected_to","ActionDispatch::IntegrationTest","ActionDispatch/IntegrationTest.html#method-i-assert_redirected_to","","<p>Assert that the redirection options passed in match those of the redirect called in the latest action. …\n"],["assert_redirected_to","ActionView::TestCase","ActionView/TestCase.html#method-i-assert_redirected_to","","<p>Assert that the redirection options passed in match those of the redirect called in the latest action. …\n"],["assert_reject_connection","ActionCable::Connection::TestCase","ActionCable/Connection/TestCase.html#method-i-assert_reject_connection","","<p>Asserts that the connection is rejected (via <code>reject_unauthorized_connection</code>).\n\n<pre>class ApplicationCable::ConnectionTest ...</pre>\n"],["assert_response","ActionDispatch::IntegrationTest","ActionDispatch/IntegrationTest.html#method-i-assert_response","","<p>Asserts that the response is one of the following types:\n<p><code>:success</code>   - Status code was in the 200-299 range …\n"],["assert_response","ActionView::TestCase","ActionView/TestCase.html#method-i-assert_response","","<p>Asserts that the response is one of the following types:\n<p><code>:success</code>   - Status code was in the 200-299 range …\n"],["assert_routing","ActionDispatch::IntegrationTest","ActionDispatch/IntegrationTest.html#method-i-assert_routing","","<p>Asserts that path and options match both ways; in other words, it verifies that <code>path</code> generates <code>options</code> …\n"],["assert_routing","ActionView::TestCase","ActionView/TestCase.html#method-i-assert_routing","","<p>Asserts that path and options match both ways; in other words, it verifies that <code>path</code> generates <code>options</code> …\n"],["assert_select","ActionDispatch::IntegrationTest","ActionDispatch/IntegrationTest.html#method-i-assert_select","","<p>An assertion that selects elements and makes one or more equality tests.\n<p>If the first argument is an element, …\n"],["assert_select","ActionView::TestCase","ActionView/TestCase.html#method-i-assert_select","","<p>An assertion that selects elements and makes one or more equality tests.\n<p>If the first argument is an element, …\n"],["assert_select_email","ActionDispatch::IntegrationTest","ActionDispatch/IntegrationTest.html#method-i-assert_select_email","","<p>Extracts the body of an email and runs nested assertions on it.\n<p>You must enable deliveries for this assertion …\n"],["assert_select_email","ActionView::TestCase","ActionView/TestCase.html#method-i-assert_select_email","","<p>Extracts the body of an email and runs nested assertions on it.\n<p>You must enable deliveries for this assertion …\n"],["assert_select_encoded","ActionDispatch::IntegrationTest","ActionDispatch/IntegrationTest.html#method-i-assert_select_encoded","","<p>Extracts the content of an element, treats it as encoded HTML and runs nested assertion on it.\n<p>You typically …\n"],["assert_select_encoded","ActionView::TestCase","ActionView/TestCase.html#method-i-assert_select_encoded","","<p>Extracts the content of an element, treats it as encoded HTML and runs nested assertion on it.\n<p>You typically …\n"],["copy_minitest_files","Minitest::Generators::InstallGenerator","Minitest/Generators/InstallGenerator.html#method-i-copy_minitest_files","()",""],["must_broadcast_on","Minitest::Rails::Expectations::ActionCable::TestHelper","Minitest/Rails/Expectations/ActionCable/TestHelper.html#method-i-must_broadcast_on","","<p>Asserts that the specified message has been sent to the stream.\n\n<pre>def test_assert_transmitted_message\n  ...</pre>\n"],["must_change","Minitest::Rails::Expectations::ActiveSupport","Minitest/Rails/Expectations/ActiveSupport.html#method-i-must_change","expression, from: UNTRACKED, to: UNTRACKED","<p>Assertion that the result of evaluating an expression is changed before and after invoking the passed …\n"],["must_differ","Minitest::Rails::Expectations::ActiveSupport","Minitest/Rails/Expectations/ActiveSupport.html#method-i-must_differ","expression, *args","<p>Test numeric difference between the return value of an expression as a result of what is evaluated.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">value</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["must_dom_equal","Minitest::Rails::Expectations::ActionDispatch","Minitest/Rails/Expectations/ActionDispatch.html#method-i-must_dom_equal","expected, message = nil","<p>Checks that two HTML strings are equivalent. That they contain the same elements and attributes with …\n"],["must_enqueue_email_with","Minitest::Rails::Expectations::ActionMailer","Minitest/Rails/Expectations/ActionMailer.html#method-i-must_enqueue_email_with","{email: 'user@example.com'} do","<p>Asserts that a specific email has been enqueued, optionally matching arguments.\n\n<pre>def test_email\n  ContactMailer.welcome.deliver_later ...</pre>\n"],["must_enqueue_jobs","Minitest::Rails::Expectations::ActiveJob","Minitest/Rails/Expectations/ActiveJob.html#method-i-must_enqueue_jobs","","<p>Expects that the number of enqueued jobs matches the given number.\n\n<pre>def test_jobs\n  must_enqueue_jobs 0 ...</pre>\n"],["must_enqueue_with","Minitest::Rails::Expectations::ActiveJob","Minitest/Rails/Expectations/ActiveJob.html#method-i-must_enqueue_with","","<p>Expects that the job passed in the block has been enqueued with the given arguments.\n\n<pre>def test_must_enqueue_with ...</pre>\n"],["must_have_broadcasts","Minitest::Rails::Expectations::ActionCable::TestHelper","Minitest/Rails/Expectations/ActionCable/TestHelper.html#method-i-must_have_broadcasts","","<p>Asserts that the number of broadcasted messages to the stream matches the given number.\n\n<pre>def test_broadcasts ...</pre>\n"],["must_have_emails","Minitest::Rails::Expectations::ActionMailer","Minitest/Rails/Expectations/ActionMailer.html#method-i-must_have_emails","","<p>Asserts that the number of emails sent matches the given number.\n\n<pre>def test_emails\n  must_have_emails 0 ...</pre>\n"],["must_have_enqueued_emails","Minitest::Rails::Expectations::ActionMailer","Minitest/Rails/Expectations/ActionMailer.html#method-i-must_have_enqueued_emails","","<p>Asserts that the number of emails enqueued for later delivery matches the given number.\n\n<pre>def test_emails ...</pre>\n"],["must_have_stream_for","Minitest::Rails::Expectations::ActionCable::Channel","Minitest/Rails/Expectations/ActionCable/Channel.html#method-i-must_have_stream_for","","<p>Asserts that the specified stream for a model has started.\n\n<pre>def test_assert_started_stream_for\n  subscribe ...</pre>\n"],["must_have_streams","Minitest::Rails::Expectations::ActionCable::Channel","Minitest/Rails/Expectations/ActionCable/Channel.html#method-i-must_have_streams","","<p>Asserts that the specified stream has been started.\n\n<pre>def test_assert_started_stream\n  subscribe\n  must_have_streams ...</pre>\n"],["must_perform_jobs","Minitest::Rails::Expectations::ActiveJob","Minitest/Rails/Expectations/ActiveJob.html#method-i-must_perform_jobs","","<p>Expects that the number of performed jobs matches the given number. If no block is passed, <code>perform_enqueued_jobs</code> …\n"],["must_perform_with","Minitest::Rails::Expectations::ActiveJob","Minitest/Rails/Expectations/ActiveJob.html#method-i-must_perform_with","","<p>Expects that the job passed in the block has been performed with the given arguments.\n\n<pre>def test_must_perform_with ...</pre>\n"],["must_reject_connection","Minitest::Rails::Expectations::ActionCable::Connection","Minitest/Rails/Expectations/ActionCable/Connection.html#method-i-must_reject_connection","","<p>Asserts that the connection is rejected (via <code>reject_unauthorized_connection</code>).\n\n<pre>describe &quot;Application Connections&quot;, ...</pre>\n"],["must_route_for","Minitest::Rails::Expectations::ActionDispatch","Minitest/Rails/Expectations/ActionDispatch.html#method-i-must_route_for","","<p>Expects that path and options match both ways; in other words, it verifies that <code>path</code> generates <code>options</code> …\n"],["must_route_from","Minitest::Rails::Expectations::ActionDispatch","Minitest/Rails/Expectations/ActionDispatch.html#method-i-must_route_from","","<p>Expects that the provided options can be used to generate the provided path. This is the inverse of  …\n"],["must_select","Minitest::Rails::Expectations::ActionDispatch","Minitest/Rails/Expectations/ActionDispatch.html#method-i-must_select","","<p>An expectation that selects elements and makes one or more equality tests.\n<p>If the first argument is an …\n"],["must_select_email","Minitest::Rails::Expectations::ActionDispatch","Minitest/Rails/Expectations/ActionDispatch.html#method-i-must_select_email","","<p>Extracts the body of an email and runs nested expectations on it.\n<p>You must enable deliveries for this …\n"],["must_select_encoded","Minitest::Rails::Expectations::ActionDispatch","Minitest/Rails/Expectations/ActionDispatch.html#method-i-must_select_encoded","","<p>Extracts the content of an element, treats it as encoded HTML and runs nested expectation on it.\n<p>You typically …\n"],["refute_difference","ActionDispatch::IntegrationTest","ActionDispatch/IntegrationTest.html#method-i-refute_difference","","<p>Checks that the numeric result of evaluating an expression is not changed before and after invoking. …\n"],["refute_difference","ActionView::TestCase","ActionView/TestCase.html#method-i-refute_difference","","<p>Checks that the numeric result of evaluating an expression is not changed before and after invoking. …\n"],["refute_dom_equal","ActionDispatch::IntegrationTest","ActionDispatch/IntegrationTest.html#method-i-refute_dom_equal","","<p>Checks that two HTML strings are not equivalent. That they do not contain the same elements and attributes …\n"],["refute_dom_equal","ActionView::TestCase","ActionView/TestCase.html#method-i-refute_dom_equal","","<p>Checks that two HTML strings are not equivalent. That they do not contain the same elements and attributes …\n"],["source_root","Minitest::Generators::InstallGenerator","Minitest/Generators/InstallGenerator.html#method-c-source_root","()",""],["wont_change","Minitest::Rails::Expectations::ActiveSupport","Minitest/Rails/Expectations/ActiveSupport.html#method-i-wont_change","expression","<p>Assertion that the result of evaluating an expression is not changed before and after invoking the passed …\n"],["wont_differ","Minitest::Rails::Expectations::ActiveSupport","Minitest/Rails/Expectations/ActiveSupport.html#method-i-wont_differ","expression","<p>Assertion that the numeric result of evaluating an expression is not changed before and after invoking. …\n"],["wont_dom_equal","Minitest::Rails::Expectations::ActionDispatch","Minitest/Rails/Expectations/ActionDispatch.html#method-i-wont_dom_equal","expected, message = nil","<p>Checks that the numeric result of evaluating an expression is not changed before and after invoking. …\n"],["wont_enqueue_jobs","Minitest::Rails::Expectations::ActiveJob","Minitest/Rails/Expectations/ActiveJob.html#method-i-wont_enqueue_jobs","","<p>Expects that no jobs have been enqueued.\n\n<pre>def test_jobs\n  wont_enqueue_jobs\n  HelloJob.perform_later(&#39;jeremy&#39;) ...</pre>\n"],["wont_have_broadcasts","Minitest::Rails::Expectations::ActionCable::TestHelper","Minitest/Rails/Expectations/ActionCable/TestHelper.html#method-i-wont_have_broadcasts","","<p>Asserts that no messages have been sent to the stream.\n\n<pre>def test_no_broadcasts\n  wont_have_broadcasts &#39;messages&#39; ...</pre>\n"],["wont_have_emails","Minitest::Rails::Expectations::ActionMailer","Minitest/Rails/Expectations/ActionMailer.html#method-i-wont_have_emails","","<p>Asserts that no emails have been sent.\n\n<pre>def test_emails\n  wont_have_emails\n  ContactMailer.welcome.deliver_now ...</pre>\n"],["wont_have_enqueued_emails","Minitest::Rails::Expectations::ActionMailer","Minitest/Rails/Expectations/ActionMailer.html#method-i-wont_have_enqueued_emails","","<p>Asserts that no emails are enqueued for later delivery.\n\n<pre>def test_no_emails\n  wont_have_enqueued_emails ...</pre>\n"],["wont_have_streams","Minitest::Rails::Expectations::ActionCable::Channel","Minitest/Rails/Expectations/ActionCable/Channel.html#method-i-wont_have_streams","","<p>Asserts that no streams have been started.\n\n<pre>def test_assert_no_started_stream\n  subscribe\n  wont_have_streams ...</pre>\n"],["wont_perform_jobs","Minitest::Rails::Expectations::ActiveJob","Minitest/Rails/Expectations/ActiveJob.html#method-i-wont_perform_jobs","","<p>Expects that no jobs have been performed.\n\n<pre>def test_jobs\n  wont_perform_jobs\n\n  perform_enqueued_jobs do ...</pre>\n"],["README","","README_md.html","","<p>minitest-rails\n<p>Minitest integration for Rails 7.1\n<p><img src=\"https://github.com/blowmage/minitest-rails/actions/workflows/ci.yml/badge.svg\"> …\n"]]}}